global !p
import vim
import os.path
def get_module_namespace_and_basename():
	"""This function will try to guess the current class or define name you are
	trying to create. Note that for this to work you should be using the module
	structure as per the style guide. Examples inputs and it's output
	* /home/nikolavp/puppet/modules/collectd/manifests/init.pp -> collectd
	* /home/nikolavp/puppet/modules/collectd/manfistes/mysql.pp -> collectd::mysql
	"""
	first_time = True
	current_file_path_without_ext = vim.eval('expand("%:p:r")') or ""
	if not current_file_path_without_ext:
		return "name"
	parts = os.path.split(current_file_path_without_ext)
	namespace = ''
	while parts[0] and parts[0] != '/':
		if parts[1] == 'init' and first_time and not namespace:
			first_time = False
			parts = os.path.split(parts[0])
			continue
		if parts[1] == 'manifests':
			return os.path.split(parts[0])[1] + ('::' + namespace).rstrip(':')
		else:
			namespace = parts[1] + '::' + namespace
		parts = os.path.split(parts[0])
	# couldn't guess the namespace. The user is editing a raw file in no module like the site.pp file
	return "name"

def get_modulename():
    """ Get the puppet module name based on the fact that it is the name of the dir above manifests
    """
    current_file = vim.eval('expand("%:p")') or ""
    if not current_file:
        return "/modulename/manifests/name.pp"
    path_array = current_file.split('/')
    path_array.reverse()
    idx = path_array.index('manifests')
    return path_array[idx + 1]

endglobal


snippet class "puppet-class" !b
# ${2:Comment goes here}
class ${1:classname} {

  ${3:#Content}

}
endsnippet

snippet pclass "parameterised class" !b
class ${1:classname} (
  $enabled = $$1::params::enabled,
  $template = $$1::params::template
) inherits $1::params {

  ${2:#Content here}

}
endsnippet 

snippet params "params class" !b
#Params class
class ${1:classname}::params {
  $enabled = false
}
endsnippet


snippet noti "notify" !b
notify{"${1:message} ${${2:myvar}}": }
endsnippet


snippet temp "template" !b
file { '${1:targetfile}':
  name    => '$1',
  mode    => '0644',
  owner   => 'root',
  group   => 'root',
  content => template('classname/sourcefile.erb'),
  require => Package['packagename'],
  notify  => Service['packagename']
}
endsnippet


snippet rclass "test class" !b
class { '${1:classname}':
  parm1 => 'value1',
}
endsnippet

snippet fil "file" !b
file { '${1:filename}':
  ensure => 'present',
  owner  => 'root',
  group  => 'root',
  mode   => '0644',
  source => 'puppet:///modules/`!p snip.rv = get_modulename()`/${3:sourcefile}',
}
endsnippet

snippet user "User" !b
user { '${1:username}':
  ensure     => present,
  uid        => -1
  gid        => -1,
  groups     => ['g1','g2'],
  shell      => "/bin/bash",
  require    => Group['g1']
}
endsnippet

snippet pack "package" !b
package { '${1:packagename}':
  ensure => installed,
}
endsnippet

snippet exec "exec" !b
exec { '${1:command}':
  command => '$1',
  onlyif  => '${2:check-command}',
}
endsnippet

snippet service "service" !b
service { '${1:servicename}':
  ensure => running,
  enable => true,
}
endsnippet

snippet yumplus "yumplus package" !b
package { '${1:packagename}':
  ensure   => installed,
  provider => 'yum_plus',
  vendor   => '--enablerepo ${2:repotoenable}',
}
endsnippet


snippet $ensure "$ensure" !b
$ensure = $enabled ? {true => running, false => stopped}
endsnippet

